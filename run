#!/usr/bin/env node
"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const child_process_1 = require("child_process");
const fs = __importStar(require("fs"));
const rest_1 = require("@octokit/rest"); // Import Octokit
const correctness_1 = require("./correctness");
const logger_1 = require("./logger");
const logger_2 = __importDefault(require("./logger"));
// Function to install dependencies
const installDependencies = () => {
    const currentLogLevel = parseInt(process.env.LOG_LEVEL || "0", 10);
    if (currentLogLevel == logger_1.LogLevel.INFO) {
        logger_2.default.info("Installing dependencies...");
    }
    (0, child_process_1.exec)('npm install', (error, stdout, stderr) => {
        if (error) {
            console.error(`Failed to install dependencies: ${stderr}`);
            process.exit(1);
        }
        console.log(stdout);
        process.exit(0);
    });
};
// Function to process URLs and calculate metrics. 
const processUrls = (urlFile, token) => __awaiter(void 0, void 0, void 0, function* () {
    // including check here again, in case we want to be able to test functions independently. 
    if (!fs.existsSync(urlFile)) {
        console.error(`URL file does not exist: ${urlFile}`);
        process.exit(1);
    }
    const urls = fs.readFileSync(urlFile, 'utf-8').split('\n').filter(Boolean);
    // Initialize Octokit
    const octokit = new rest_1.Octokit(token ? { auth: token } : {});
    for (const url of urls) {
        const [owner, repo] = extractOwnerAndRepo(url);
        if (owner && repo) {
            // these should all return floats. 
            //const { responsiveness, responsiveness_latency } = await calculateResponsiveness(owner, repo, octokit);
            const { correctness, correctness_latency } = yield (0, correctness_1.calculateCorrectness)(owner, repo, octokit);
            //const { busfactor, busfactory_latency } = await calculateBusFactor(owner, repo, 50, octokit);
            //const { license, license_latency } = await calculateLicenseCompatibility(owner, repo,  50, octokit);
            //const { rampup, rampup_latency } = await calculateRampUpTime(owner, repo, 50, octokit); 
            // commenting out metrics that are implemented correctly (don't want to waste queries)
            const responsiveness = -1;
            const responsiveness_latency = -1;
            const busfactor = -1;
            const busfactory_latency = -1;
            const license = -1;
            const license_latency = -1;
            const rampup = -1;
            const rampup_latency = -1;
            // do some error checking here if a metric was calculated incorrectly. 
            // netscore calculations. 
            const netscore = (.40) * responsiveness + (.30) * correctness + (.15) * busfactor + (.10) * rampup + (.05) * license;
            const netscore_latency = responsiveness_latency + correctness_latency + busfactory_latency + rampup_latency + license_latency;
            // Output the results in NDJSON format
            console.log(JSON.stringify({
                URL: url,
                NetScore: netscore,
                NetScore_Latency: netscore_latency,
                RampUp: rampup,
                RampUp_Latency: rampup_latency,
                Correctness: correctness,
                Correctness_Latency: correctness_latency,
                BusFactor: busfactor,
                BusFactor_Latency: busfactory_latency,
                ResponsiveMaintainer: responsiveness,
                ResponsiveMaintainer_Latency: responsiveness_latency,
                License: license,
                License_Latency: license_latency,
            }));
        }
        else {
            console.error(`Invalid URL format: ${url}`);
            process.exit(1);
        }
    }
    process.exit(0);
});
// Helper function to extract owner and repo from URL.
const extractOwnerAndRepo = (url) => {
    const match = url.match(/github\.com\/([^\/]+)\/([^\/]+)/);
    return match ? [match[1], match[2]] : [null, null];
};
// Function to run tests
const runTests = () => {
    console.log("Running tests...");
    // This is where you'd call your test framework
    const testCasesPassed = 20; // Mock value
    const totalTestCases = 25; // Mock value
    const lineCoverage = 85; // Mock value
    console.log(`${testCasesPassed}/${totalTestCases} test cases passed. ${lineCoverage}% line coverage achieved.`);
    process.exit(0);
};
// Main function to handle command line arguments
const main = () => {
    const [, , command, _] = process.argv;
    // Check if token is provided for the URL processing
    const token = process.env.GITHUB_TOKEN || ''; // Use environment variable or empty string
    const currentLogLevel = parseInt(process.env.LOG_LEVEL || "0", 10);
    // Function to validate the GitHub token
    const validateToken = (token) => __awaiter(void 0, void 0, void 0, function* () {
        const octokit = new rest_1.Octokit({ auth: token });
        try {
            yield octokit.rest.users.getAuthenticated();
            return true; // Token is valid
        }
        catch (error) {
            console.error('Invalid GitHub token:');
            return false; // Token is invalid
        }
    });
    switch (command) {
        case 'install':
            installDependencies();
            break;
        case 'test':
            runTests();
            break;
        default:
            // assuming the command is the URL_FILE, first checking if it exists. 
            if (!fs.existsSync(command)) {
                console.error(`URL file does not exist: ${command}`);
                process.exit(1);
            }
            // also assert a valid gitHub token.
            if (!validateToken(token)) {
                process.exit(1);
            }
            processUrls(command, token);
    }
};
main();
