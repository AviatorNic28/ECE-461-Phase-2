/*

This file contains all of the project code. It includes the main function that runs the script,
api calls, parsing command-line arguments, and calculating metrics.
(we can seperate logic to other files as needed.)

*/

// Import necessary libraries
import { Command } from 'commander'; // used for parsing command-line arguments.
import * as fs from 'fs'; // used for reading files.
import * as path from 'path'; // used for getting file paths.
import axios from 'axios'; // used for making api calls.
import * as dotenv from 'dotenv'; // used for accessing env vars.


// REVIEW ALL CODE BELOW - just an outline generated by ChatGPT. 


// Function to parse the command-line argument and get the file path
function parseCommandLineArgs(): string {
    const args = process.argv.slice(2);
    if (args.length === 0) {
        throw new Error('No file provided. Please provide a file as a command-line argument.');
    }
    return args[0];
}

// Function to read the file
function readFile(filePath: string): string[] {
    const fullPath = path.resolve(filePath);
    if (!fs.existsSync(fullPath)) {
        throw new Error(`File not found: ${filePath}`);
    }
    const content = fs.readFileSync(fullPath, 'utf-8');
    return content.split('\n').filter(line => line.trim() !== ''); // Split lines and filter out empty lines
}

// Function to make API calls
/* NOTE:
* we will also need to do some analysis without using the GitHub API (
we'll have to clone the repo locally and do some analysis. 
)
*/
async function makeApiCall(url: string): Promise<void> {
    try {
        const response = await axios.get(url);
        console.log(`Response from ${url}:`, response.data);
    } catch (error) {
        console.error(`Error fetching from ${url}:`, error.message);
    }
}

// Main function
async function main() {
    try {
        const filePath = parseCommandLineArgs();
        const urls = readFile(filePath);
        console.log(`Making API calls to ${urls.length} URLs...`);

        for (const url of urls) {
            await makeApiCall(url);
        }
    } catch (error) {
        console.error('Error:', error.message);
    }
}

// Run the program
main();